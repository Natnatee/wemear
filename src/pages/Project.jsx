// import { useParams } from "react-router-dom";
import { useEffect } from "react";
import NavbarWithSidebar from "../components/NavbarWithSidebar";
import CardImage from "../components/CardImage";
import QRCodeGenerator from "../components/QRCodeGenerator";
import { make_project } from "../make_data/make_project.js";
import projectStore from "../utils/projectStore.js";

function Project() {
  //‡∏£‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
  // const { id } = useParams();

  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ mock ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const project = projectStore((state) => state.project);
  const setProject = projectStore((state) => state.setProject); // üëà ‡∏î‡∏∂‡∏á Action ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
  const setProjectName = projectStore((state) => state.setProjectName);
  const setProjectLabel = projectStore((state) => state.setProjectLabel);

  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mock ‡πÄ‡∏Ç‡πâ‡∏≤ Store
  useEffect(() => {
    // ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏£‡∏¥‡∏á: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    const mockData = make_project;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Zustand State
    setProject(mockData);
  }, [setProject]); // Array ‡∏ß‡πà‡∏≤‡∏á [] ‡∏´‡∏£‡∏∑‡∏≠ [setProject] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  if (!project) {
    return (
      <>
        <NavbarWithSidebar />
        <div className="container mx-auto p-4">
          <div className="text-center py-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            </h1>
            <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤</p>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <NavbarWithSidebar />
      <div className="container mx-auto p-4">
        <div className="max-w-6xl mx-auto">
          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô - ‡πÅ‡∏¢‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤ */}
          <div className="flex flex-col lg:flex-row gap-8 mb-8">
            {/* ‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div className="lg:w-1/2 flex items-center justify-center">
              <img
                src={project.image}
                alt={project.name}
                className="w-full h-64 lg:h-80 object-cover rounded-lg shadow-md"
              />
            </div>

            {/* ‡∏Ç‡∏ß‡∏≤ - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ */}
            <div className="lg:w-1/2 relative">
              <div className="bg-gray-50 rounded-lg p-6 h-full">
                <h2 className="text-xl font-semibold mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</h2>
                <div className="space-y-3">
                  <div>
                    <span className="font-medium text-gray-700">
                      ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:
                    </span>
                    <input
                      type="text"
                      value={project.name ?? ""}
                      onChange={(e) => setProjectName(e.target.value)}
                      className="ml-2 px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
                    />
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Label:</span>
                    <input
                      type="text"
                      value={project.label ?? ""}
                      onChange={(e) => setProjectLabel(e.target.value)}
                      className="ml-2 px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="‡πÉ‡∏™‡πà label"
                    />
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Owner:</span>
                    <span className="ml-2">{project.owner}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:
                    </span>
                    <span className="ml-2">{project.date}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                    <span
                      className={`ml-2 px-2 py-1 rounded text-sm ${
                        project.status === "Published"
                          ? "bg-green-100 text-green-800"
                          : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      {project.status}
                    </span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-700">Tool:</span>
                    <span className="ml-2">{project.tool}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* ‡∏™‡πà‡∏ß‡∏ô - ‡πÅ‡∏™‡∏î‡∏á Scene CardImage */}
          <div className="mb-8">
            <h3 className="text-lg font-semibold mb-4">
              Scenes (Image Tracking)
            </h3>

            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {/*
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• image tracking ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô map tracks -> scenes
                ‡πÅ‡∏ï‡πà‡∏•‡∏∞ card ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å make_project.info.tracking_modes.image.mindFile.image[trackId]
                id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ card ‡πÄ‡∏õ‡πá‡∏ô IMAGE_{trackId}{sceneId} ‡πÄ‡∏ä‡πà‡∏ô IMAGE_T1S1
                ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ scene ‡πÉ‡∏ô track ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
              */}
              {project?.info?.tracking_modes?.image?.tracks?.map((track) =>
                track.scenes?.map((scene) => {
                  const trackId = track.track_id; // ex "T1"
                  const sceneId = scene.scene_id; // ex "S1"
                  const mindImages =
                    project.info?.tracking_modes?.image?.mindFile?.image || {};
                  const imgSrc =
                    mindImages[trackId] ?? "/default_asset_image/image.png";
                  const cardId = `IMAGE_${trackId}${sceneId}`; // IMAGE_T1S1
                  return (
                    <div
                      key={cardId}
                      className="bg-white rounded-lg shadow p-3 flex flex-col items-start"
                    >
                      <img
                        src={imgSrc}
                        alt={cardId}
                        className="w-full h-40 object-cover rounded mb-3"
                      />
                      <div className="text-sm font-medium">{cardId}</div>

                    </div>
                  );
                })
              )}
            </div>
          </div>
          {/* ‡∏™‡πà‡∏ß‡∏ô QR Code */}
          <div className="bg-white rounded-lg shadow-md p-8">
            <QRCodeGenerator link={project.link} />
            <button
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
              onClick={() => console.log(project)}
            >
              Deploy
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default Project;
