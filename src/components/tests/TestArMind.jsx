import React, { Suspense, useState, useEffect, useRef } from "react";
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ARView ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏≤‡∏Å react-three-mind ‡πÅ‡∏•‡∏∞ mind-ar
import { ARView, ARAnchor } from "react-three-mind";

// Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á 3D object ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ
function ARTrackedObject() {
  const meshRef = useRef();

  useEffect(() => {
    if (meshRef.current) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation ‡πÉ‡∏´‡πâ object ‡∏´‡∏°‡∏∏‡∏ô
      meshRef.current.rotation.x = 0;
      meshRef.current.rotation.y = 0;
    }
  }, []);

  return (
    <group>
      {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å */}
      <mesh ref={meshRef} position={[0, 0, 0]}>
        <boxGeometry args={[0.5, 0.5, 0.5]} />
        <meshStandardMaterial color="blue" />
      </mesh>

      {/* ‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏•‡∏≠‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
      <mesh position={[0, 0.8, 0]}>
        <sphereGeometry args={[0.1, 8, 8]} />
        <meshStandardMaterial color="yellow" emissive="yellow" emissiveIntensity={0.3} />
      </mesh>
    </group>
  );
}

// Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
function NotFoundTarget() {
  return (
    <mesh position={[0, 0, -2]}>
      <planeGeometry args={[2, 1]} />
      <meshBasicMaterial color="red" transparent opacity={0.7} />
    </mesh>
  );
}

function TestArMind() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isTracking, setIsTracking] = useState(false);
  const [targetFound, setTargetFound] = useState(false);
  const [error, setError] = useState(null);

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î image target ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  const imageTargets = {
    // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ target ‡πÄ‡∏õ‡πá‡∏ô "test-target"
    // ‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .mind ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• image target
    "test-target": {
      url: "/targets/test-target.mind", // ‡πÑ‡∏ü‡∏•‡πå .mind ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    }
  };

  useEffect(() => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AR
    const timer = setTimeout(() => {
      setIsInitialized(true);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  const handleARError = (error) => {
    console.error("AR Error:", error);
    setError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AR");
  };

  const handleTargetFound = () => {
    setTargetFound(true);
    setIsTracking(true);
  };

  const handleTargetLost = () => {
    setTargetFound(false);
    setIsTracking(false);
  };

  return (
    <div
      style={{
        width: "100%",
        height: "70vh",
        position: "relative",
        backgroundColor: "#000",
        borderRadius: "8px",
        overflow: "hidden",
      }}
    >
      {/* Header */}
      <div
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          backgroundColor: "rgba(0,0,0,0.8)",
          color: "white",
          padding: "10px",
          zIndex: 10,
        }}
      >
        <h3 style={{ margin: 0, fontSize: "16px" }}>
          üß† MindAR Image Tracking Demo
        </h3>
        <div style={{ fontSize: "12px", opacity: 0.8 }}>
          ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {isInitialized ? "‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"}
          {isTracking && " | üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"}
          {targetFound && " | üéØ ‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"}
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div
          style={{
            position: "absolute",
            top: "60px",
            left: "10px",
            right: "10px",
            backgroundColor: "rgba(255,0,0,0.8)",
            color: "white",
            padding: "8px",
            borderRadius: "4px",
            zIndex: 10,
            fontSize: "12px",
          }}
        >
          ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}
        </div>
      )}

      {/* Instructions */}
      <div
        style={{
          position: "absolute",
          bottom: "10px",
          left: "10px",
          right: "10px",
          backgroundColor: "rgba(0,0,0,0.7)",
          color: "white",
          padding: "10px",
          borderRadius: "4px",
          fontSize: "12px",
          zIndex: 10,
        }}
      >
        <div>üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</div>
        <div>‚Ä¢ ‡∏Å‡∏î "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á</div>
        <div>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå .mind ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô</div>
        <div>‚Ä¢ ‡∏ä‡∏µ‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</div>
      </div>

      {/* AR View */}
      <ARView
        imageTargets={imageTargets}
        onARError={handleARError}
        onTargetFound={handleTargetFound}
        onTargetLost={handleTargetLost}
        style={{
          width: "100%",
          height: "100%",
        }}
      >
        {/* ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏â‡∏≤‡∏Å AR */}
        <ambientLight intensity={0.6} />
        <directionalLight position={[10, 10, 5]} intensity={0.8} />

        <Suspense fallback={null}>
          {/* ‡πÅ‡∏™‡∏î‡∏á object ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ */}
          <ARAnchor target="test-target">
            <ARTrackedObject />
          </ARAnchor>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ */}
          {!targetFound && <NotFoundTarget />}
        </Suspense>
      </ARView>
    </div>
  );
}

export default TestArMind;
